// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/demo/app (interfaces: UsersDB)

// Package app_test is a generated GoMock package.
package app_test

import (
	app "github.com/demo/app"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsersDB is a mock of UsersDB interface
type MockUsersDB struct {
	ctrl     *gomock.Controller
	recorder *MockUsersDBMockRecorder
}

// MockUsersDBMockRecorder is the mock recorder for MockUsersDB
type MockUsersDBMockRecorder struct {
	mock *MockUsersDB
}

// NewMockUsersDB creates a new mock instance
func NewMockUsersDB(ctrl *gomock.Controller) *MockUsersDB {
	mock := &MockUsersDB{ctrl: ctrl}
	mock.recorder = &MockUsersDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersDB) EXPECT() *MockUsersDBMockRecorder {
	return m.recorder
}

// AddUser mocks base method
func (m *MockUsersDB) AddUser(arg0 app.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser
func (mr *MockUsersDBMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUsersDB)(nil).AddUser), arg0)
}

// FindUser mocks base method
func (m *MockUsersDB) FindUser(arg0 string) (app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", arg0)
	ret0, _ := ret[0].(app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser
func (mr *MockUsersDBMockRecorder) FindUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUsersDB)(nil).FindUser), arg0)
}
